require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CustomersController do

  include Devise::TestHelpers
  
  let(:customer) { FactoryGirl.create :customer }
  # This should return the minimal set of attributes required to create a valid
  # CreditCard. As you add validations to CreditCard, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "firstname" => "MyString", "lastname" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CreditCardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  
  before do
    sign_in customer
  end

  describe "PATCH update" do
    describe "with valid params" do
      it "updates the current customer" do
        Customer.any_instance.should_receive(:update).with({ "firstname" => "MyString", "lastname" => "MyString1"  })
        patch :update, {:customer => { "firstname" => "MyString", "lastname" => "MyString1" }}, valid_session
      end

      it "redirects to the customer" do
        patch :update, {:customer => { "firstname" => "MyString", "lastname" => "MyString1" }}, valid_session
        response.should redirect_to(customer_path)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        Customer.any_instance.stub(:save).and_return(false)
         patch :update, {:customer => { "firstname" => "invalid", "lastname" => "invalid" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

end
