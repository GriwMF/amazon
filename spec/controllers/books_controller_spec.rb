require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BooksController do
  include Devise::TestHelpers

  let(:customer) { FactoryGirl.create :admin_customer }
  
  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { title: "War And Peace", description: "Blah blah blah-blah ",
                           price: "9.99", in_stock: "24" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BooksController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  
  before do
    sign_in customer
  end

  describe "GET index" do
    it "assigns all books as @books" do
      book = Book.create! valid_attributes
      get :index, {}, valid_session
      assigns(:books).should eq([book])
    end
  end

  describe "GET show" do
    let!(:book) {  Book.create! valid_attributes }
    
    it "assigns the requested book as @book" do
      get :show, {:id => book.to_param}, valid_session
      assigns(:book).should eq(book)
    end
    
    it "assigns last 10 approved ratings as @book_ratings" do
      rating = book.ratings.create!(text: "good book", rating: "3", approved: "true")
      get :show, {:id => book.to_param}, valid_session
      assigns(:book_ratings).should eq([rating])
    end
  end
  
  describe "POST rate" do
    let(:book) { Book.create! valid_attributes }
    
    describe "valid attributes" do
      it "adds new rating" do
        expect {
          post :rate, {:id => book.to_param, text: "text rating", rating: "4"}, valid_session
        }.to change(book.ratings, :count).by(1)
      end
      
      it "adds successed flash message" do
        post :rate, {:id => book.to_param, text: "text rating", rating: "4"}, valid_session
        expect(flash[:info]).to eq("Success! Please, wait for rating confirmation")
      end
      
      it "redirects to root path" do
        post :rate, {:id => book.to_param, text: "text rating", rating: "4"}, valid_session
         response.should redirect_to(root_url)
      end
    end
    
    describe "invalid attributes" do
      it "adds error flash message" do
        post :rate, {:id => book.to_param, text: "text rating", rating: "8"}, valid_session
        expect(flash[:info]).to_not eq("Success! Please, wait for rating confirmation")
        expect(flash[:danger]).to_not be_empty
      end
      
      it "redirects to root path" do
       post :rate, {:id => book.to_param, text: "text rating", rating: "8"}, valid_session
       response.should redirect_to(root_url)
      end
    end
  end
  
  describe "DELETE wished" do
    let(:book) { Book.create! valid_attributes }

    it "delete book from wished list" do
      book.wish_add(customer)
      expect {
        delete :wished, {:id => book.to_param}, valid_session
      }.to change(book.wished_customers, :count).by(-1)
    end

    it "redirects to customer profile" do
      delete :wished, {:id => book.to_param}, valid_session
      response.should redirect_to(customer)
    end
  end
  
  describe "POST add_wished" do
    let(:book) { Book.create! valid_attributes }
    before do
      allow_any_instance_of(Book).to receive(:wish_add)
    end
    
    it "calls wish_add" do
      expect_any_instance_of(Book).to receive(:wish_add)
      post :add_wished, {:id => book.to_param}, valid_session
    end
    
    it "redirects to show book path" do
      post :add_wished, {:id => book.to_param}, valid_session
      response.should redirect_to(book_path(book))
    end
      
    describe "all valid" do
      it "adds success flash message" do
        allow_any_instance_of(Book).to receive(:wish_add).and_return(true)
        post :add_wished, {:id => book.to_param}, valid_session
        expect(flash[:info]).to eq "Successefully added"
      end
    end
    
    describe "already rated" do
      it "adds error flash message" do
        allow_any_instance_of(Book).to receive(:wish_add).and_return(false)
        post :add_wished, {:id => book.to_param}, valid_session
        expect(flash[:info]).to_not eq "Successefully added"
        expect(flash[:danger]).to eq "Already rated"
      end
    end   
  end  
  
  describe "POST filter" do
    let(:book) { Book.create! valid_attributes }
    
    it "redirects to root path if params[:commit] == 'Reset'" do
      post :filter, {:id => book.to_param, :commit => 'Reset'}, valid_session
      expect(response).to redirect_to(root_path)
    end
    
    before do
      Book.stub_chain("filter.includes").and_return([book])
    end
    
    it "filtering books by parameters" do
      expect(Book).to receive(:filter)
      expect(Book.filter).to receive(:includes)
      post :filter, {:id => book.to_param, :authors_id => [""], :categories_id => [""], :books_id => [book.id]}, valid_session
      expect(assigns(:books)).to eq([book])
    end
    
    it "renders index template" do
      post :filter, {:id => book.to_param, :authors_id => [""], :categories_id => [""], :books_id => [book.id]}, valid_session
      expect(response).to render_template("index")
    end
  end
  
end
